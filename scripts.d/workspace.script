#!/bin/bash
# Visit workspaces and do their application housekeping.
# 
### SOME IMPORTANT EARLY DECLARATIONS

# These names must track the names listed in the eponymous section
# inside SWAY_CONFIG_FILE. Config variables are not shell variables.
export SWAY_CONFIG_FILE=${HOME}/.config/sway/config
export SWAY_CONFIG_DIR=${HOME}/.config/sway/config.d
export SWAY_SCRIPTS_DIR=${HOME}/.config/sway/scripts.d
export SWAY_ASSETS_DIR=${HOME}/.config/sway/assets.d
#
# Visit the workspace $1 with an app $2 expected to be running there,
# and $3 launched by "$exe".
#
function subroutine
{
    # Common code hoisted to save space and minimise copy-paste.  Debug
    # echo stmts require invocation in a terminal. Don't forget to quote
    # $app and $exe in the calls of this function.
    ws="$1"; app="$2"; exe="$3";
    echo "app=$app"
    echo "exe=$exe"
    # STEP 1 Visit the target workspace if not already there.
    cws=$(swaymsg -p -t "get_workspaces" | grep "Workspace $ws (focused)" )
    if [ "_$cws" = "_" ]; then
	echo "visiting \"$1\" from \"$cws\" in a few seconds" 
	swaymsg "workspace --no-auto-back-and-forth $ws"
	sleep 3
    else
	echo "in situ at \"$1\" already"
    fi
    # STEP 2 If none exists then create an instance of the app on the
    # target workspace.
    wsapp=$(swaymsg -p -t "get_workspaces" | \
		grep -A3 "Workspace $ws" | grep "$app")
    echo "|$wsapp|$app|"
    ### "Representation: H[emacs]" <= Cosmetic: strip the R word after testing.
    if [ "_$wsapp" = "_" ]; then
	echo "Representation not matched, launching \"${exe}\" now"
	swaymsg "exec ${exe}"
	postlaunch "$ws"	
    elif [ "_$wsapp" = "_Representation: H[]" ]; then
	echo "Representation suggests empty workspace, launching \"${exe}\" now"
	swaymsg "exec ${exe}"
	postlaunch "$ws"
    elif [ "_$wsapp" = "_Representation: H[null]" ]; then
	echo "Representation null, app $app not listed, visit workspace $ws only"
    else
	wsapp=${wsapp/Representation:/}
	echo "\"${wsapp}\" says \"${exe}\" is already running"
    fi
}

#
# Helper function for apps that were launched on the current visit to
# workspace $1.
#
function postlaunch
 {
    # Use alpha placeholders for cases that have not been associated with a
    # (double-digit) workspace (hard-coded).
    case "$ws" in
	(uu|33|55)
	    # Setup time to be confident that there is an app window
	    # on-screen.
	    sleep 3s
	    # We don't want fullscreen 'cos it loses the lists of
	    # workspaces on each output provided by the status bar. 
	    swaymsg  "fullscreen disable"
	    ;;
	(vv|99)
	    sleep 3s
	    swaymsg  "fullscreen toggle global"
	    ;;
	(*)
	    ;;
    esac
 }


### A SIDEBAR REGARDING MULTIPLE-TERMINAL-INSTANCE WORKSPACES ###

	# You can add more instances or delete some instances and the
	# instances that were there before will survive, =UNLESS= you
	# or anybody or anything else reduces the number of instances
	# to ZERO, in which case the workspace will offer to rebuild
	# itself with four fresd instances ready by the bext visit
	# depending upon your response to a dialog that has a short
	# timeout before asssuming rebuild is requested.

#
# START HERE.
#
 
# Each workspace can have its own custom behaviour. Apply double
# quotes and semi colons defensively.

 # Thunar progress indicator made floating so it stands out. Helps
 # avoid file corruption or truncation.
swaymsg "for_window [app_id="Thunar" title="^Copying.*"] floating enable"
 
ws="$1"
case "$ws" in
    #
    ### Section 0
    #
    (33)
	# Emacs. This case is placed first to mitigate risk of code
	# corruption thereby facilitating repair.
	app="emacs"; exe="emacs";
	subroutine "$ws" "$app" "$exe"
	;;
    (32)
	# This workspace starts with four instances of "foot", the
	# preferrred terminal for sway, although alacritty comes
	# close. Steep learning curve imo.
	app="foot"; exe="someterminals.script foot 4 32";
	subroutine "$ws" "$app" "$exe"
	;;
    (32Y)
	# This workspace starts with four instances of "kgx".
	# a terminal with some of the better classic features.
	app="kgx"; exe="someterminals.script kgx 4 ${ws}";
 	subroutine "$ws" "$app" "$exe"
	;;
    #
    ### Section 1
    #
    # These are our generic cases handled by "setup.script".
    #
    # The following two  cases, 97 and 97X, are  system monitors which
    # live on workspace  97. Only one, 97, is enabled,  because 97X is
    # disabled by virtue of the X.   This is a generic technique, used
    # specifically to choose  either "htop" or "BpyTOP"  as our system
    # monitor on workspace 97.
    #
    # Also used for foot|kgx terminals (32)(43) and thunar|nautilus
    # file explorers (66)(44). ToDo emacs|nvim.
    #
    (97)
	# htop. alacritty can set its app_id with -class.
	# htop is less resource intensive than BpyTOP. 
	app="htop"; exe="alacritty --class htop -e htop";
	subroutine "$ws" "$app" "$exe"
	;;
    (97X)
 	# BpyTOP. alacritty can set its app_id with -class.
	# Beautiful but hungry.
	app="bpytop"; exe="alacritty --class bpytop -e bpytop";
	subroutine "$ws" "$app" "$exe"
	;;
    (93)
	# DLNA/UPnP server on quietpc built with minidlna, details in
	# "upnp.script" (restricted distribution) (personal project).
	upnp.script
	;; 	
    (88)
	# VLC MJPG capture =or= DVB capture. VLC launches but needs manual
	# capture setup, these both work.
	app="vlc"; exe="vlc";
	subroutine "$ws" "$app" "$exe"
	;;
    (55)
	app="org.mozilla.firefox"; exe="firefox";
	subroutine "$ws" "$app" "$exe"
	;;
    (44X|66X)
	# Files alias nautilus from GNOME.
	# Open current working directory as it was at invocation.
	# Possible "consolidate workspaces" bug, otherwise much
	# improved of late and stil very pretty.
	app="org.gnome.Nautilus"; exe="$(printf "xdg-open %s" $(pwd))";
	subroutine "$ws" "$app" "$exe"
	;;
    (44|66)
	# Thunar from XFCE.
	# 2 workspaces, 1 even 1 odd.
 	# Fedora/ Sway spin "recommended" DE file manager.
	# Opens current working directory as it was at invocation. 
	app="thunar"; exe="$(printf "thunar %s" $(pwd))";
	subroutine "$ws" "$app" "$exe"
	;;
    (45)
	# CD burner on external USB. (1) accepts ISOs (2) creates Data
	# CDs from files (3) creates Audio CDs (4) erases CD-RW. It is
	# put on an odd-numbered workspace to be opposite Files.
	app=xfburn; exe=xfburn;
	subroutine "$ws" "$app" "$exe"
	;;
    (43X)
	# This workspace starts with four instances of "foot".
	app="foot"; exe="someterminals.script foot 4 32";
	subroutine "$ws" "$app" "$exe"
	;;
    (43)
	# This workspace starts with four instances of "kgx".
	app="kgx"; exe="someterminals.script kgx 4 ${ws}";
	subroutine "$ws" "$app" "$exe"
	;;
    (22)
	app="spotify"; exe="flatpak run com.spotify.Client";
	subroutine "$ws" "$app" "$exe"
	;;
    (14)
	# DVD ripper using either DVD drive.  YOU MUST BUILD MAKEMKV
	# FROM SOURCE & BLOB for this script to work, but if you do
	# not, the executable fedora provides does still work.
	# https://linuxconfig.org/how-to-install-makemkv-on-fedora-linux
	# ellathecat on fedora 41, v1.17.9, expires 2025-05-30.
	app="makemkv" ; exe="makemkv" ;
	subroutine "$ws" "$app" "$exe"
	;;
    #
    ### Section 2
    #
    # These are our more specific cases not yet fully implemented.
    (12) 
        # CD ripper. Everything configured in Preferences including
 	# using external USB CD drive /dev/sr1.
	app="asunder" ; exe="asunder";
	subroutine "$ws" "$app" "$exe"
	;;
    (00)
	# Used to play a short looping video as entertainment, for
	# diagnostics (setting levels, swapped speakers) and an
	# override condttion for for the sway idle inhibitor. Type m
	# in the video window for mute toggle. Type space to pause
	# (stfu) or play.
	app="mpv"; exe="mpv --loop-file inf ${SWAY_ASSETS_DIR}/intro.mp4";
	subroutine "$ws" "$app" "$exe"
	;;
    ([0-9][0-9])
	# Visit a workspace, but do no application housekeeping other
	# than showing the winapps menu. Unassigned workspaces end up
	# here. Note: bash handles cases in order of reading down the
	# page FIRST MATCH WINS so this case catches any double-digit
	# workspace that hasn't been caught already.
        sway "workspace --no-auto-back-and-forth $ws"
	sleep 1s
	rofi -show combi -combi-modes window\#drun -modes combi
	;;
    (*)
	# All nonsense and all errors MUST END UP HERE and cause EXIT
        # WITH FAILURE status. The regex captures everything but we've
        # already caught all the double-digits. So what's left are the
        # invalid workspace names.
	exit 1
	;;
esac
     
# EXIT with success here makes sense of exit with failure above.
exit 0


#
# Done.
#
                                                                                                                                                                                                                            

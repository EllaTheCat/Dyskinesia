#!/bin/bash
# Visit workspaces and do their application housekeping.
# 
### SOME IMPORTANT EARLY DECLARATIONS

# These names must track the names listed in the eponymous section
# inside SWAY_CONFIG_FILE. Config variables are not shell variables.
export SWAY_CONFIG_FILE=${HOME}/.config/sway/config
export SWAY_CONFIG_DIR=${HOME}/.config/sway/config.d
export SWAY_SCRIPTS_DIR=${HOME}/.config/sway/scripts.d
export SWAY_ASSETS_DIR=${HOME}/.config/sway/assets.d
#
# Visit the workspace $1 with an app $2 expected to be running there,
# and $2 launched by "$exe".
#
function subroutine
{
    # Common code hoisted to save space and minimise copy-paste.  Debug
    # echo stmts require invocation in a terminal. Don't forget to quote
    # $app and $exe in the calls of this function.
    ws="$1"; app="$2"; exe="$3";
    echo "app=$app"
    echo "exe=$exe"
    # STEP 1 Visit the target workspace if not already there.
    cws=$(swaymsg -p -t "get_workspaces" | grep "Workspace $ws (focused)" )
    if [ "_$cws" = "_" ]; then
	echo "visiting \"$1\" from \"$cws\" in a few seconds" 
	swaymsg "workspace --no-auto-back-and-forth $ws"
	sleep 3
    else
	echo "in situ at \"$1\" already"
    fi
    # STEP 2 If none exists then create an instance of the app on the
    # target workspace.
    wsapp=$(swaymsg -p -t "get_workspaces" | \
		grep -A3 "Workspace $ws" | grep "$app")
    echo "|$wsapp|$app|"
    ### "Representation: H[emacs]" <= Cosmetic: strip the R word after testing.
    if [ "_$wsapp" = "_" ]; then
	echo "Representation not matched, launching \"${exe}\" now"
	swaymsg "exec ${exe}"
    elif [ "_$wsapp" = "_Representation: H[]" ]; then
	echo "Representation suggests empty workspace, launching \"${exe}\" now"
	swaymsg "exec ${exe}"
    elif [ "_$wsapp" = "_Representation: H[null]" ]; then
	echo "Representation null, app $app not listed, visit workspace $ws only"
    else
	wsapp=${wsapp/Representation:/}
	echo "\"${wsapp}\" says \"${exe}\" is already running"
    fi
}

#
# Start here. Each workspace can have its own custom behaviour. Apply
# double quotes and semi colons defensively.
ws="$1"
case "$ws" in
    # Section 0
    (33)
	# Emacs. This case is placed first to mitigate risk of code
	# corruption thereby facilitating repair.
	app="emacs"; exe="emacs";
	subroutine "$ws" "$app" "$exe"
	;;
    # Section 1
    # These are our generic cases handled by "setup.script". 
    (99)
	# htop. alacritty can set its app_id with -class.
	# htop is less resource intensive than BpyTOP. 
	app="htop"; exe="alacritty --class htop -e htop";
	subroutine "$ws" "$app" "$exe"
	;;
    (97)
 	# BpyTOP. alacritty can set its app_id with -class.
	# 40% CPU when PC idle, do not autostart unless...
	app="bpytop"; exe="alacritty --class bpytop -e bpytop";
	subroutine "$ws" "$app" "$exe"
	;;
    (93)
	# DLNA/UPnP server on quietpc built with minidlna, details in
	# "upnp.script" (restricted distribution) (personal project).
	upnp.script
	;; 	
    (88|89)
	# VLC MJPG capture =or= DVB capture. VLC launches but needs manual
	# capture setup, these both work.
	app="vlc"; exe="vlc";
	subroutine "$ws" "$app" "$exe"
	;;
    (55|56)
	app="org.mozilla.firefox"; exe="firefox";
	subroutine "$ws" "$app" "$exe"
	;;
    (44|46)
	# Files. Opens current working directory as it was at
	# invocation. Put on even-numbered workspaces
	app="org.gnome.Nautilus"; exe="$(printf "xdg-open %s" $(pwd))";
	subroutine "$ws" "$app" "$exe"
	;;
    (45)
	# CD burner on external USB. (1) accepts ISOs (2) creates Data
	# CDs from files (3) creates Audio CDs (4) erases CD-RW. It is
	# put on an odd-numbered workspace to be opposite Files.
	app=xfburn; exe=xfburn;
	subroutine "$ws" "$app" "$exe"
	;;
    (14)
	# DVD ripper using either DVD drive.  YOU MUST BUILD MAKEMKV
	# FROM SOURCE & BLOB for this script to work, but if you do
	# not, the executable fedora provides does still work.
	# https://linuxconfig.org/how-to-install-makemkv-on-fedora-linux
	# ellathecat on fedora 41, v1.17.9, expires 2025-05-30.
	app=makemkv; exe=makemkv;
	subroutine "$ws" "$app" "$exe"
	;;
    (22)
	app="spotify"; exe="flatpak run com.spotify.Client";
	subroutine "$ws" "$app" "$exe"
	;;
 # Section 2
	# These are our more specific cases not yet fully implemented.
    (12) 
        # CD ripper. Everything configured in Preferences including
 	# using external USB CD drive /dev/sr1.
	app=asunder; exe=asunder;
	subroutine "$ws" "$app" "$exe"
        ;;
    ([0-9][0-9])
	# Visit a workspace, but do no application housekeeping other
	# than showing the winapps menu. Unassigned workspaces end up
	# here. Note: bash handles cases in order of reading down the
	# page FIRST MATCH WINS so this case catches any double-digit
	# workspace that hasn't been caught already.
        sway "workspace --no-auto-back-and-forth $ws"
	sleep 1s
	rofi -show combi -combi-modes window\#drun -modes combi	
	;;
   (*)
	# All nonsense and all errors MUST END UP HERE and cause EXIT
        # WITH FAILURE status. The regex captures everything but we've
        # already caught all the double-digits. So what's left are the
        # invalid workspace names.
	exit 1
	;;
esac
     
# EXIT with success here makes sense of exit with failure above.
exit 0


#
# Done.
#
                                                                                                                                                                                                                            
